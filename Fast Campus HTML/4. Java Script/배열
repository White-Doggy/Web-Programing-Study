[ 배열 ]
여러 형태를 나열하기 위한 

const array = [1, 'b', {}, 4];

array[0]

자료형 관계 없음 / 0부터 시작 


[ 추가 ]
array.push(내용)


[ 길이 ]
array.log 
해당 배열의 자료 개수 확인 





[ 배열 내장 함수 ]

forEach
배열 내부의 각각의 원소를 활용하는 내장 함수
배열명.forEach(조작 함수)


map
배열 내용들을 변환해 적용하도록 하는 함수
배열명.map(조작 함수)


indexOf
배열에서 해당 내용의 index를 확인하기 위한 함수 ( 단순한 값인 경우만 적용 )
배열명.indexOf(찾는 내용)


findIndex
특수한 조건에 대해서 해당 내용의 인덱스를 찾기 위한 함수
배열명.findIndex( 조작 함수 )

ex)
const index = todos.findIndex(todo => todo.id === 3);


find
위와 조작은 같으나, 해당 대상의 객체나 대상을 찾음


filter
조건 함수에 부합하는 대상들로만으로 새로운 배열을 생성
배열.filter ( 조건 함수 )





[ 배열 내장 함수 2 ]

splice
해당 배열에서 인덱스를 기반으로 제거함

배열.splice(시작인덱스, 삭제 개수);

++ 만약 변수로 지정후 위 내용을 실행하면 삭제한 내용을 새로운 배열로 받음


slice
해당 배열에서 인덱스를 기반으로 잘라서 가져옴
위와 유사 하지만 가지지만, slice는 기존 배열의 상태는 유지됨

배열.slice(시작인덱스, 종료 인덱스);




shift
배열의 맨 앞의 원소를 꺼냄
배열.shift();

pop
배열의 맨 뒤의 원소를 꺼냄
배열.pop();

둘다, 기존 배열이 수정됨


unshift
배열의 맨 앞에 파라미터 값을 추가함
배열명.unshift(내용);

push
배열의 맨 뒤에 파라미터 값을 추가함
배열명.push(내용);



concat
해당 배열과 다른 배열을 합침
배열1.concat(배열2);


join
배열의 내용을 하나의 문자열로 변환해줌
배열명.join();

파라미터를 비워둘 경우 배열 요소마다 쉼표로 구분
안에 값을 넣으면 해당 값으로 구분지어서 문자열 생성



reduce
현재 값과 특정 초기값을 바탕으로 함수 처리를 통해 결과 값을 얻음
( 근데 이새끼 정확히 무슨 함수인지 설명을 안함 )


